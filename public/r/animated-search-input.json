{
  "name": "animated-search-input",
  "title": "Animated Search Input",
  "description": "A animated seach input component",
  "type": "registry:ui",
  "files": [
    {
      "path": "registry/components/ui/animated-search-input.tsx",
      "type": "registry:ui",
      "content": "'use client'\r\n\r\nimport * as React from 'react'\r\nimport { cn } from '@/lib/utils'\r\nimport { motion, stagger, useAnimate, AnimationSequence } from 'motion/react'\r\n\r\ninterface AnimatedSearchInputProps\r\n  extends Omit<React.ComponentProps<\"input\">, 'placeholder'> {\r\n  placeholders: string[],\r\n  value: string,\r\n  setValue: (val: string) => void,\r\n  haltDuration?: number,\r\n  enableTabCompletion?: boolean\r\n}\r\n\r\nconst AnimatedSearchInput = React.forwardRef<HTMLInputElement, AnimatedSearchInputProps>(\r\n  ({ placeholders, haltDuration = 1, enableTabCompletion = true, className, type, value, setValue, onFocus, onBlur, ...props }, ref) => {\r\n    const [currentIdx, setCurrentIdx] = React.useState(0); // currentIdx of the suggestion which is currently showing\r\n    const [isFocused, setIsFocused] = React.useState(false);\r\n\r\n    const handleKeydown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n      if (enableTabCompletion && isFocused && e.key === 'Tab') {\r\n        setValue(placeholders[currentIdx]);\r\n      }\r\n    }\r\n\r\n    const handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {\r\n      setIsFocused(true);\r\n      onFocus?.(e);\r\n    }\r\n\r\n    const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\r\n      setIsFocused(false);\r\n      onBlur?.(e);\r\n    }\r\n\r\n    return (\r\n      <div className='mx-4 my-2 relative'>\r\n        <input\r\n          ref={ref}\r\n          type={type}\r\n          value={value}\r\n          onFocus={handleFocus}\r\n          onBlur={handleBlur}\r\n          onKeyDown={handleKeydown}\r\n          className={cn(\r\n            'h-10 w-full min-w-[25rem] border-2 border-neutral-200 dark:border-neutral-700 rounded-full px-6 py-2 text-sm shadow-xl/10 dark:shadow-lg dark:shadow-white focus-visible:outline-none disabled:opacity-50',\r\n            'bg-gradient-to-r from-neutral-50 to-neutral-100',\r\n            'dark:from-neutral-800 dark:to-neutral-900',\r\n            className\r\n          )}\r\n          {...props}\r\n        />\r\n        <div className='h-full w-full py-1 flex px-6 items-center absolute inset-0 pointer-events-none select-none'>\r\n          {\r\n            (value === undefined || value === null || value === '') && placeholders[currentIdx] && (\r\n              <AnimatedPlaceholder text={placeholders[currentIdx]} haltDuration={haltDuration} increasecurrentIdx={() => setCurrentIdx(prevcurrentIdx => (prevcurrentIdx + 1) % placeholders.length)} key={currentIdx} />\r\n            )\r\n          }\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n)\r\n\r\nAnimatedSearchInput.displayName = 'AnimatedSearchInput'\r\n\r\nconst AnimatedPlaceholder = ({ text, increasecurrentIdx, haltDuration }: { text: string, increasecurrentIdx: () => void, haltDuration: number }) => {\r\n  const [scope, animate] = useAnimate();\r\n\r\n  React.useEffect(() => {\r\n    const startAnimation = async () => {\r\n      const sequence: AnimationSequence = [\r\n        ['span', { y: 0, opacity: 1, filter: 'blur(0px)' }, { duration: 0.3, type: 'tween', delay: stagger(0.05) }],\r\n        ['span', {}, { at: `+${haltDuration}` }], // delay between two placeholders\r\n        ['span', { y: -20, opacity: 0, filter: 'blur(10px)' }, { duration: 0.3, type: 'tween', delay: stagger(0.05) }]\r\n      ]\r\n\r\n      await animate(sequence);\r\n\r\n      increasecurrentIdx(); // to initialize the animation for the next suggestion\r\n    }\r\n\r\n    startAnimation();\r\n  }, [animate, haltDuration, increasecurrentIdx])\r\n\r\n  return (\r\n    <div ref={scope} className='text-nowrap overflow-hidden'>\r\n      {\r\n        text.split('').map((t, i) => (\r\n          <motion.span\r\n            initial={{\r\n              y: 20,\r\n              opacity: 0,\r\n              filter: 'blur(10px)'\r\n            }}\r\n            className='inline-block whitespace-pre-wrap text-sm text-muted-foreground pointer-events-none select-none'\r\n            aria-hidden={true}\r\n            key={`${t}-${i}`}\r\n          >\r\n            {t}\r\n          </motion.span>\r\n        ))\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { AnimatedSearchInput }\r\n"
    }
  ],
  "dependencies": [
    "motion"
  ]
}