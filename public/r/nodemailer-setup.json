{
  "name": "nodemailer-setup",
  "title": "Advanced Nodemailer Setup",
  "description": "Advanced Nodemailer Setup with rate limiting and retries accessibility",
  "type": "registry:snippet",
  "files": [
    {
      "path": "registry/backend-snippets/src/utils/nodemailer.ts",
      "type": "registry:snippet",
      "target": "src/utils",
      "content": "import nodemailer from 'nodemailer'\r\nimport { google } from 'googleapis'\r\n\r\n// Type definitions\r\ninterface EmailServiceConfig {\r\n  clientId?: string;\r\n  clientSecret?: string;\r\n  redirectURI?: string;\r\n  refreshToken?: string;\r\n  sendersAddress?: string;\r\n  organizationName?: string;\r\n  minDelay?: number;\r\n  maxRetries?: number;\r\n  retryDelay?: number;\r\n}\r\n\r\ninterface EmailOptions {\r\n  to: string | string[];\r\n  cc?: string | string[];\r\n  bcc?: string | string[];\r\n  subject: string;\r\n  html?: string;\r\n  text?: string;\r\n  content?: string; // Backward compatibility\r\n  attachments?: Array<{\r\n    filename?: string;\r\n    content?: string | Buffer;\r\n    path?: string;\r\n    contentType?: string;\r\n  }>;\r\n  headers?: Record<string, string>;\r\n  priority?: 'High' | 'Normal' | 'Low';\r\n  trackingId?: string;\r\n}\r\n\r\ninterface EmailResult {\r\n  success: boolean;\r\n  messageId?: string;\r\n  accepted?: string[];\r\n  rejected?: string[];\r\n  response?: string;\r\n  error?: string;\r\n}\r\n\r\nclass EmailService {\r\n  private clientId;\r\n  private clientSecret;\r\n  private redirectURI;\r\n  private refreshToken;\r\n  private sendersAddress;\r\n  private organizationName;\r\n  private oauth2Client: any;\r\n  private lastEmailTime: number = 0;\r\n  private minDelay: number;\r\n  private maxRetries: number;\r\n  private retryDelay: number;\r\n\r\n  constructor(config: EmailServiceConfig = {}) {\r\n    this.clientId = config.clientId || process.env.CLIENT_ID || '';\r\n    this.clientSecret = config.clientSecret || process.env.CLIENT_SECRET || '';\r\n    this.redirectURI = config.redirectURI || process.env.REDIRECT_URI || '';\r\n    this.refreshToken = config.refreshToken || process.env.REFRESH_TOKEN || '';\r\n    this.sendersAddress = config.sendersAddress || process.env.SENDERS_ADDRESS || '';\r\n    this.organizationName = config.organizationName || process.env.ORGANIZATION_NAME || 'Vynk'; // or hard code here\r\n\r\n    // Configuration\r\n    this.minDelay = config.minDelay || 100;\r\n    this.maxRetries = config.maxRetries || 3;\r\n    this.retryDelay = config.retryDelay || 1000;\r\n\r\n    // Validate required environment variables\r\n    this.validateConfig();\r\n\r\n    // Initialize OAuth2 client\r\n    this.oauth2Client = new google.auth.OAuth2(\r\n      this.clientId,\r\n      this.clientSecret,\r\n      this.redirectURI\r\n    );\r\n\r\n    this.oauth2Client.setCredentials({ refresh_token: this.refreshToken });\r\n  }\r\n\r\n  private validateConfig(): void {\r\n    const requiredVars = [\r\n      { key: 'clientId', name: 'CLIENT_ID' },\r\n      { key: 'clientSecret', name: 'CLIENT_SECRET' },\r\n      { key: 'redirectURI', name: 'REDIRECT_URI' },\r\n      { key: 'refreshToken', name: 'REFRESH_TOKEN' },\r\n      { key: 'sendersAddress', name: 'SENDERS_ADDRESS' }\r\n    ];\r\n\r\n    const missingVars = requiredVars.filter(({ key }) => !this[key as keyof this]);\r\n\r\n    if (missingVars.length > 0) {\r\n      throw new Error(`Missing required configuration: ${missingVars.map(v => v.name).join(', ')}`);\r\n    }\r\n  }\r\n\r\n  private async createTransport(): Promise<nodemailer.Transporter> {\r\n    try {\r\n      const accessToken = await this.oauth2Client.getAccessToken();\r\n\r\n      if (!accessToken.token) {\r\n        throw new Error('Failed to obtain access token');\r\n      }\r\n\r\n      return nodemailer.createTransport({\r\n        service: 'gmail',\r\n        auth: {\r\n          type: 'OAuth2',\r\n          user: this.sendersAddress,\r\n          clientId: this.clientId,\r\n          clientSecret: this.clientSecret,\r\n          refreshToken: this.refreshToken,\r\n          accessToken: accessToken.token\r\n        },\r\n        // Connection pooling for better performance\r\n        pool: true,\r\n        maxConnections: 5,\r\n        maxMessages: 100\r\n      });\r\n    } catch (error) {\r\n      console.error('Error creating email transporter:', error);\r\n      throw new Error(`Failed to create email transporter: ${(error as Error).message}`);\r\n    }\r\n  }\r\n\r\n  private async rateLimitCheck(): Promise<void> {\r\n    const now = Date.now();\r\n    const timeSinceLastEmail = now - this.lastEmailTime;\r\n\r\n    if (timeSinceLastEmail < this.minDelay) {\r\n      const waitTime = this.minDelay - timeSinceLastEmail;\r\n      await new Promise(resolve => setTimeout(resolve, waitTime));\r\n    }\r\n\r\n    this.lastEmailTime = Date.now();\r\n  }\r\n\r\n  // Use this function to send Emails\r\n  async sendEmail(options: EmailOptions, retryCount: number = 0): Promise<EmailResult> {\r\n    try {\r\n      // Validate required options\r\n      if (!options.to || !options.subject) {\r\n        throw new Error('Missing required email options: to, subject');\r\n      }\r\n\r\n      // Rate limiting\r\n      await this.rateLimitCheck();\r\n\r\n      const transporter = await this.createTransport();\r\n\r\n      const mailOptions: nodemailer.SendMailOptions = {\r\n        from: `${this.organizationName} <${this.sendersAddress}>`,\r\n        to: options.to,\r\n        subject: options.subject,\r\n        html: options.html || options.content,\r\n        text: options.text,\r\n        cc: options.cc,\r\n        bcc: options.bcc,\r\n        attachments: options.attachments,\r\n        headers: {\r\n          'X-Priority': options.priority || 'Normal',\r\n          'X-Mailer': 'EmailService-v2.0',\r\n          ...options.headers\r\n        }\r\n      };\r\n\r\n      // Add custom message ID for tracking\r\n      if (options.trackingId) {\r\n        mailOptions.headers = {\r\n          ...mailOptions.headers,\r\n          'X-Tracking-ID': options.trackingId\r\n        };\r\n      }\r\n\r\n      const result = await transporter.sendMail(mailOptions);\r\n\r\n      console.log(`‚úÖ Email sent successfully to ${options.to} - Message ID: ${result.messageId}`);\r\n\r\n      return {\r\n        success: true,\r\n        messageId: result.messageId,\r\n        accepted: result.accepted,\r\n        rejected: result.rejected,\r\n        response: result.response\r\n      };\r\n\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      console.error(`‚ùå Error sending email to ${options.to}:`, errorMessage);\r\n\r\n      if (retryCount < this.maxRetries) {\r\n        console.log(`üîÑ Retrying email send (${retryCount + 1}/${this.maxRetries})...`);\r\n        await new Promise(resolve => setTimeout(resolve, this.retryDelay * Math.pow(2, retryCount)));\r\n        return this.sendEmail(options, retryCount + 1);\r\n      }\r\n\r\n      return {\r\n        success: false,\r\n        error: `Failed to send email after ${this.maxRetries} attempts: ${errorMessage}`\r\n      };\r\n    }\r\n  }\r\n\r\n  // Create your email templates here as a function which callls the above 'sendEmail' function or use React Email Templates\r\n}\r\n\r\n// Create singleton instance\r\nconst emailService = new EmailService();\r\n\r\n// Export both the class and instance\r\nexport { EmailService, emailService };\r\n\r\n// Export types\r\nexport type { EmailOptions, EmailResult };"
    }
  ],
  "dependencies": [
    "nodemailer",
    "googleapis"
  ],
  "devDependencies": [
    "@types/nodemailer"
  ]
}