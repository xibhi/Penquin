{
  "name": "accordion",
  "title": "Accordion",
  "description": "A accordion component",
  "type": "registry:ui",
  "files": [
    {
      "path": "registry/components/ui/accordion.tsx",
      "type": "registry:ui",
      "content": "'use client'\r\n\r\nimport * as React from 'react'\r\nimport * as AccordionPrimitive from '@radix-ui/react-accordion'\r\nimport { cn } from '@/lib/utils';\r\nimport { IconChevronDown } from '@tabler/icons-react'\r\nimport { AnimatePresence, motion } from 'motion/react'\r\n\r\nconst Accordion = AccordionPrimitive.Root;\r\n\r\nconst AccordionItem = React.forwardRef<\r\n  React.ElementRef<typeof AccordionPrimitive.Item>,\r\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\r\n>(\r\n  ({ className, ...props }, ref) => (\r\n    <AccordionPrimitive.Item\r\n      ref={ref}\r\n      className={cn(\r\n        'divide-y divide-border',\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n)\r\nAccordionItem.displayName = 'AccordionItem'\r\n\r\nconst AccordionTrigger = React.forwardRef<\r\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\r\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\r\n>(\r\n  ({ children, className, ...props }, ref) => {\r\n    return (\r\n      <AccordionPrimitive.Header className='mt-0'>\r\n        <AccordionPrimitive.Trigger\r\n          ref={ref}\r\n          className={cn(\r\n            'flex w-full justify-between p-2 group cursor-pointer',\r\n            className\r\n          )}\r\n          {...props}\r\n        >\r\n          <span className='group-hover:ml-2 text-left transition-all duration-200 text-base font-medium'>{children}</span>\r\n          <IconChevronDown size={18} aria-hidden={true} className='text-muted-foreground shrink-0 transition-transform duration-200 group-data-[state=open]:rotate-180' />\r\n        </AccordionPrimitive.Trigger>\r\n      </AccordionPrimitive.Header>\r\n    )\r\n  }\r\n)\r\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\r\n\r\ntype AccordionContentProps = React.ComponentPropsWithoutRef<\r\n  typeof AccordionPrimitive.Content\r\n> & {\r\n  animationDuration?: number\r\n}\r\n\r\nconst AccordionContent = React.forwardRef<\r\n  React.ElementRef<typeof AccordionPrimitive.Content>,\r\n  AccordionContentProps\r\n>(\r\n  ({ className, children, animationDuration = 0.3, ...props }, ref) => {\r\n    const [isOpen, setIsOpen] = React.useState(false);\r\n    const contentRef = React.useRef<null | HTMLDivElement>(null);\r\n\r\n    React.useEffect(() => {\r\n      const node = contentRef.current;\r\n      if (!node) return;\r\n\r\n      // To observe the change in the state of the content\r\n      const observer = new MutationObserver(() => {\r\n        const newState = node.getAttribute('data-state');\r\n        setIsOpen(newState === 'open');\r\n      });\r\n\r\n      observer.observe(node, { attributes: true, attributeFilter: ['data-state'] });\r\n\r\n      return () => observer.disconnect();\r\n    }, []);\r\n\r\n    return (\r\n      <AccordionPrimitive.Content\r\n        forceMount\r\n        ref={contentRef}\r\n        {...props}\r\n        className='overflow-hidden transition-all duration-200'\r\n      >\r\n        <AnimatePresence initial={false}>\r\n          {\r\n            isOpen && (\r\n              <motion.div\r\n                initial={{\r\n                  height: 0,\r\n                  opacity: 0,\r\n                  filter: 'blur(10px)',\r\n                  scale: 0.95\r\n                }}\r\n                animate={{\r\n                  height: 'auto',\r\n                  opacity: 1,\r\n                  filter: 'blur(0px)',\r\n                  scale: 1\r\n                }}\r\n                exit={{\r\n                  height: 0,\r\n                  opacity: 0,\r\n                  filter: 'blur(10px)',\r\n                  scale: 0.95\r\n                }}\r\n                transition={{\r\n                  duration: animationDuration,\r\n                  ease: 'easeInOut',\r\n                  type: 'tween',\r\n                }}\r\n              >\r\n                <div\r\n                  ref={ref}\r\n                  className={cn(\r\n                    'px-4 pb-4 text-sm',\r\n                    className\r\n                  )}\r\n                >\r\n                  {children}\r\n                </div>\r\n              </motion.div>\r\n            )\r\n          }\r\n        </AnimatePresence>\r\n      </AccordionPrimitive.Content>\r\n    )\r\n  }\r\n)\r\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\r\n\r\nexport { Accordion, AccordionContent, AccordionItem, AccordionTrigger }\r\n"
    }
  ],
  "dependencies": [
    "@radix-ui/react-accordion",
    "@tabler/icons-react",
    "motion"
  ]
}